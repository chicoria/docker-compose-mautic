name: Clean DigitalOcean Volumes (Keep Droplet)

on:
  workflow_dispatch:
    inputs:
      confirm_clean:
        description: 'Type "clean" to confirm volume deletion'
        required: true
        type: string

jobs:
  clean:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_clean == 'clean'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required secrets
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        run: |
          if [ -z "${DIGITALOCEAN_ACCESS_TOKEN}" ]; then
            echo "Error: Missing required secret: DIGITALOCEAN_ACCESS_TOKEN"
            exit 1
          fi

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Get Volume Information
        id: volume_info
        run: |
          echo "Checking for associated volumes..."
          MYSQL_VOLUME=$(doctl compute volume list --format Name,ID --no-header | grep mautic-mysql || true)
          FILES_VOLUME=$(doctl compute volume list --format Name,ID --no-header | grep mautic-files || true)

          if [ -n "$MYSQL_VOLUME" ]; then
            echo "Found MySQL volume: $MYSQL_VOLUME"
            echo "mysql_volume_exists=true" >> $GITHUB_ENV
          else
            echo "No MySQL volume found"
            echo "mysql_volume_exists=false" >> $GITHUB_ENV
          fi

          if [ -n "$FILES_VOLUME" ]; then
            echo "Found Files volume: $FILES_VOLUME"
            echo "files_volume_exists=true" >> $GITHUB_ENV
          else
            echo "No Files volume found"
            echo "files_volume_exists=false" >> $GITHUB_ENV
          fi

      - name: Detach Volumes
        run: |
          # Get Droplet ID
          DROPLET_ID=$(doctl compute droplet list --format ID,Name --no-header | grep mautic-vps | awk '{print $1}')

          # MySQL Volume
          MYSQL_VOLUME_ID=$(doctl compute volume list --format ID,Name --no-header | grep mautic-mysql | awk '{print $1}')
          if [ -n "$MYSQL_VOLUME_ID" ] && [ -n "$DROPLET_ID" ]; then
            echo "Detaching MySQL volume..."
            doctl compute volume-action detach "$MYSQL_VOLUME_ID" "$DROPLET_ID"
          fi

          # Files Volume
          FILES_VOLUME_ID=$(doctl compute volume list --format ID,Name --no-header | grep mautic-files | awk '{print $1}')
          if [ -n "$FILES_VOLUME_ID" ] && [ -n "$DROPLET_ID" ]; then
            echo "Detaching Files volume..."
            doctl compute volume-action detach "$FILES_VOLUME_ID" "$DROPLET_ID"
          fi

      - name: Delete Volumes
        run: |
          if [ "${{ env.mysql_volume_exists }}" = "true" ]; then
            echo "Deleting MySQL volume..."
            MYSQL_VOLUME_ID=$(doctl compute volume list --format ID,Name --no-header | grep mautic-mysql | awk '{print $1}')
            doctl compute volume delete $MYSQL_VOLUME_ID --force
          fi

          if [ "${{ env.files_volume_exists }}" = "true" ]; then
            echo "Deleting Files volume..."
            FILES_VOLUME_ID=$(doctl compute volume list --format ID,Name --no-header | grep mautic-files | awk '{print $1}')
            doctl compute volume delete $FILES_VOLUME_ID --force
          fi

      - name: Get VPS IP
        id: get_ip
        run: |
          IP=$(doctl compute droplet get mautic-vps --format PublicIPv4 --no-header)
          echo "SERVER_IP=$IP" >> $GITHUB_ENV

      - name: Remove all Docker containers and images on the droplet
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > id_rsa
          chmod 600 id_rsa
          ssh -o StrictHostKeyChecking=no -i id_rsa root@${{ env.SERVER_IP }} '
            cd /var/www
            echo "Stopping and removing all containers with docker compose..."
            docker compose down --rmi all -v --remove-orphans
            echo "Removing any remaining containers..."
            docker ps -aq | xargs -r docker stop
            docker ps -aq | xargs -r docker rm
            echo "Removing any remaining images..."
            docker images -aq | xargs -r docker rmi -f
            echo "Docker cleanup complete."
          '
          rm -f id_rsa

      - name: Cleanup Complete
        run: |
          echo "Cleanup completed successfully."
          echo "The following resources were destroyed:"
          if [ "${{ env.mysql_volume_exists }}" = "true" ]; then
            echo "- MySQL volume 'mautic-mysql'"
          fi
          if [ "${{ env.files_volume_exists }}" = "true" ]; then
            echo "- Files volume 'mautic-files'"
          fi
          echo "Droplet 'mautic-vps' was NOT destroyed."
