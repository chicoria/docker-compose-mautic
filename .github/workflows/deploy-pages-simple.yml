name: Deploy Site to Cloudflare Pages (Simple)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
  push:
    branches:
      - main
    paths:
      - 'site/**'
      - '.github/workflows/deploy-pages-simple.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required secrets
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "Error: Missing CLOUDFLARE_API_TOKEN secret"
            exit 1
          fi
          if [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
            echo "Error: Missing CLOUDFLARE_ACCOUNT_ID secret"
            exit 1
          fi

      - name: Create deployment package
        run: |
          # Create a zip file of the site directory
          cd site
          zip -r ../site-deploy.zip .
          cd ..
          echo "Created deployment package: site-deploy.zip"
          ls -la site-deploy.zip

      - name: Deploy to Cloudflare Pages
        run: |
          # Get the Pages project ID
          PROJECT_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | jq -r '.result[] | select(.name == "superare") | .id')

          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
            echo "Error: Could not find Cloudflare Pages project 'superare'"
            echo "Available projects:"
            curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" | jq -r '.result[].name'
            exit 1
          fi

          echo "Found Pages project ID: $PROJECT_ID"

          # Create a new deployment
          DEPLOYMENT_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/superare/deployments" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{
              "production_branch": "main"
            }')

          DEPLOYMENT_ID=$(echo "$DEPLOYMENT_RESPONSE" | jq -r '.result.id')
          
          if [ -z "$DEPLOYMENT_ID" ] || [ "$DEPLOYMENT_ID" = "null" ]; then
            echo "Error: Failed to create deployment"
            echo "Response: $DEPLOYMENT_RESPONSE"
            exit 1
          fi

          echo "Created deployment ID: $DEPLOYMENT_ID"

          # Upload the files
          echo "Uploading files..."
          curl -s -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/superare/deployments/$DEPLOYMENT_ID/files" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary @site-deploy.zip

          echo "Files uploaded successfully"

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          
          # Check deployment status
          DEPLOYMENT_STATUS=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/superare/deployments" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | jq -r '.result[0].status')

          echo "Deployment status: $DEPLOYMENT_STATUS"

      - name: Verify site accessibility
        run: |
          echo "Verifying site accessibility..."
          if curl -f -s "https://superare.com.br" > /dev/null; then
            echo "‚úÖ Site is accessible at https://superare.com.br"
          else
            echo "‚ö†Ô∏è  Site may still be deploying. Please check Cloudflare Pages dashboard."
          fi

      - name: Deployment summary
        run: |
          echo "## üöÄ Deployment Complete"
          echo ""
          echo "**Site URL**: https://superare.com.br"
          echo "**Pages Project**: superare"
          echo "**Files deployed**:"
          ls -la site/
          echo ""
          echo "**Monitor deployment**: https://dash.cloudflare.com/pages" 