name: Post-Installation Configuration

# This workflow is triggered manually from the Actions tab on your GitHub repository.
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to run configurations against"
        required: true
        default: "production"
        type: choice
        options:
          - production

jobs:
  configure:
    name: Run Post-Installation Configuration for ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check required secrets
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          MAUTIC_PASSWORD: ${{ secrets.MAUTIC_PASSWORD }}
          EMAIL_ADDRESS: ${{ vars.EMAIL_ADDRESS }}
          DOMAIN: ${{ vars.DOMAIN }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          MAUTIC_MAILER_FROM_NAME: ${{ vars.MAUTIC_MAILER_FROM_NAME }}
          MAUTIC_MAILER_FROM_EMAIL: ${{ vars.MAUTIC_MAILER_FROM_EMAIL }}
          MOBILE_NUMBER: ${{ vars.MOBILE_NUMBER }}
        run: |
          error_missing_secrets=()
          check_secret() {
            if [ -z "${!1}" ]; then
              error_missing_secrets+=("$1")
            fi
          }

          check_secret "DIGITALOCEAN_ACCESS_TOKEN"
          check_secret "MAUTIC_PASSWORD"
          check_secret "EMAIL_ADDRESS"
          check_secret "SENDGRID_API_KEY"
          check_secret "MAUTIC_MAILER_FROM_NAME"
          check_secret "MAUTIC_MAILER_FROM_EMAIL"
          check_secret "MOBILE_NUMBER"
          check_secret "DOMAIN"

          if [ ${#error_missing_secrets[@]} -ne 0 ]; then
            echo "Error: Missing required secrets/variables: ${error_missing_secrets[*]}"
            exit 1
          fi

      - name: Generate .mautic_env with all GitHub Actions variables and secrets
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          MAUTIC_PASSWORD: ${{ secrets.MAUTIC_PASSWORD }}
          EMAIL_ADDRESS: ${{ vars.EMAIL_ADDRESS }}
          DOMAIN: ${{ vars.DOMAIN }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          MAUTIC_MAILER_FROM_NAME: ${{ vars.MAUTIC_MAILER_FROM_NAME }}
          MAUTIC_MAILER_FROM_EMAIL: ${{ vars.MAUTIC_MAILER_FROM_EMAIL }}
          MOBILE_NUMBER: ${{ vars.MOBILE_NUMBER }}
        run: |
          cat > .mautic_env <<EOF
          MAUTIC_DB_HOST="${MYSQL_HOST}"
          MAUTIC_DB_PORT="${MYSQL_PORT}"
          MAUTIC_DB_DATABASE="${MYSQL_DATABASE}"
          MAUTIC_DB_USER="${MYSQL_USER}"
          MAUTIC_DB_PASSWORD="${MYSQL_PASSWORD}"
          MAUTIC_PORT="8001"
          MAUTIC_MESSENGER_DSN_EMAIL="doctrine://default"
          MAUTIC_MESSENGER_DSN_HIT="doctrine://default"
          MAUTIC_MAILER_FROM_NAME="$MAUTIC_MAILER_FROM_NAME"
          MAUTIC_MAILER_FROM_EMAIL="$MAUTIC_MAILER_FROM_EMAIL"
          MAUTIC_MAILER_TRANSPORT="smtp"
          MAUTIC_MAILER_HOST="smtp.sendgrid.net"
          MAUTIC_MAILER_PORT="587"
          MAUTIC_MAILER_USER="apikey"
          MAUTIC_MAILER_PASSWORD="$SENDGRID_API_KEY"
          MAUTIC_MAILER_ENCRYPTION="tls"
          MAUTIC_MAILER_AUTH_MODE="login"
          EMAIL_ADDRESS="$EMAIL_ADDRESS"
          DOMAIN="$DOMAIN"
          MOBILE_NUMBER="$MOBILE_NUMBER"
          DIGITALOCEAN_ACCESS_TOKEN="$DIGITALOCEAN_ACCESS_TOKEN"
          MAUTIC_PASSWORD="$MAUTIC_PASSWORD"
          EOF

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Get VPS IP and construct Mautic URL
        run: |
          # Get the droplet IP
          IP=$(doctl compute droplet get mautic-vps --format PublicIPv4 --no-header)
          if [ -z "$IP" ]; then
            echo "Error: Could not get IP address for mautic-vps droplet"
            exit 1
          fi
          echo "Droplet IP: $IP"

          # Load .mautic_env to get port
          set -a
          source .mautic_env
          set +a

          # Construct Mautic URL using domain with 'm.' prefix
          MAUTIC_URL="https://m.${DOMAIN}"

          echo "Mautic URL: $MAUTIC_URL"
          echo "MAUTIC_URL=$MAUTIC_URL" >> $GITHUB_ENV
          echo "MAUTIC_USER=$EMAIL_ADDRESS" >> $GITHUB_ENV
          echo "DROPLET_IP=$IP" >> $GITHUB_ENV
        env:
          EMAIL_ADDRESS: ${{ vars.EMAIL_ADDRESS }}
          DOMAIN: ${{ vars.DOMAIN }}

      - name: Setup Python environment
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Update .mautic_env with deployment values
        run: |
          # Update the existing .mautic_env file with deployment-specific values
          sed -i "s|MAUTIC_URL=.*|MAUTIC_URL=\"${{ env.MAUTIC_URL }}\"|" .mautic_env
          sed -i "s|MAUTIC_USER=.*|MAUTIC_USER=\"${{ env.MAUTIC_USER }}\"|" .mautic_env
          sed -i "s|MAUTIC_PASSWORD=.*|MAUTIC_PASSWORD=\"${{ secrets.MAUTIC_PASSWORD }}\"|" .mautic_env
          
          # Set MAUTIC_HOST with 'm.' prefix
          MAUTIC_HOST="m.${DOMAIN}"
          sed -i "s|MAUTIC_HOST=.*|MAUTIC_HOST=\"$MAUTIC_HOST\"|" .mautic_env

          echo "Updated .mautic_env file:"
          cat .mautic_env

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin
          docker compose version           

      - name: Restart Mautic container to apply new mail settings
        run: |
          docker-compose down
          docker-compose up -d          

      - name: Testing the SendGrid email settings
        run: |
          echo "Configuring SendGrid email settings..."
          echo "Using Mautic URL: ${{ env.MAUTIC_URL }}"
          echo "Using user: ${{ env.MAUTIC_USER }}"
          python post-install-configuration-email.py
        env:
          MAUTIC_URL: ${{ env.MAUTIC_URL }}
          MAUTIC_USER: ${{ env.MAUTIC_USER }}
          MAUTIC_PASSWORD: ${{ secrets.MAUTIC_PASSWORD }}
          EMAIL_ADDRESS: ${{ vars.EMAIL_ADDRESS }}
          MOBILE_NUMBER: ${{ vars.MOBILE_NUMBER }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}

      - name: Finalizing Configuration
        run: |
          echo "Post-installation configuration completed successfully for the ${{ github.event.inputs.environment }} environment."
          echo "SendGrid email configuration has been set up"
          echo "Test email has been sent to: ${{ vars.EMAIL_ADDRESS }}"
          echo "Check your email inbox for the SendGrid test email"
          echo "Mautic is now ready for email marketing campaigns"

