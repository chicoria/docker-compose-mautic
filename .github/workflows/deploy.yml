name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load .mautic_env variables
        run: |
          set -a
          source .mautic_env
          set +a
          echo "MAUTIC_PORT=${MAUTIC_PORT}" >> $GITHUB_ENV

      - name: Check EMAIL_ADDRESS environment variable
        run: |
          if [ -z "${EMAIL_ADDRESS}" ]; then
            echo "Error: Missing required environment variable: EMAIL_ADDRESS"
            exit 1
          fi
        env:
          EMAIL_ADDRESS: ${{ vars.EMAIL_ADDRESS }}

      - name: Check required secrets
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          DIGITALOCEAN_SSH_FINGERPRINT: ${{ secrets.DIGITALOCEAN_SSH_FINGERPRINT }}
          MAUTIC_PASSWORD: ${{ secrets.MAUTIC_PASSWORD }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          error_missing_secrets=()
          check_secret() {
            if [ -z "${!1}" ]; then
              error_missing_secrets+=("$1")
            fi
          }

          check_secret "DIGITALOCEAN_ACCESS_TOKEN"
          check_secret "DIGITALOCEAN_SSH_FINGERPRINT"
          check_secret "MAUTIC_PASSWORD"
          check_secret "SSH_PRIVATE_KEY"

          if [ ${#error_missing_secrets[@]} -ne 0 ]; then
            echo "Error: Missing required secrets: ${error_missing_secrets[*]}"
            exit 1
          fi

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Create VPS if it doesn't exist
        run: |
          if ! doctl compute droplet list | grep -q 'mautic-vps'; then
            doctl compute droplet create mautic-vps --image docker-20-04 --size s-1vcpu-2gb --region nyc3 --ssh-keys ${{ secrets.DIGITALOCEAN_SSH_FINGERPRINT }} --wait --user-data-file setup-vps.sh --enable-monitoring
            echo "droplet_created=true" >> $GITHUB_ENV
          else
            echo "Droplet 'mautic-vps' already exists."
            echo "droplet_created=true" >> $GITHUB_ENV
          fi

      - name: Create Block Storage Volumes
        run: |
          # Create MySQL volume if it doesn't exist
          if ! doctl compute volume list | grep -q 'mautic-mysql'; then
            doctl compute volume create mautic-mysql --size 10GiB --region nyc3 --fs-type ext4
          fi

          # Create Mautic volume if it doesn't exist
          if ! doctl compute volume list | grep -q 'mautic-files'; then
            doctl compute volume create mautic-files --size 10GiB --region nyc3 --fs-type ext4
          fi

      - name: Attach Volumes
        if: env.droplet_created == 'true'
        run: |
          # Get droplet ID
          DROPLET_ID=$(doctl compute droplet list --format ID,Name --no-header | grep mautic-vps | awk '{print $1}')

          # Get volume IDs
          MYSQL_VOLUME_ID=$(doctl compute volume list --format ID,Name --no-header | grep mautic-mysql | awk '{print $1}')
          FILES_VOLUME_ID=$(doctl compute volume list --format ID,Name --no-header | grep mautic-files | awk '{print $1}')

          # Attach volumes to droplet
          if [ -n "$MYSQL_VOLUME_ID" ]; then
            echo "Attaching MySQL volume..."
            doctl compute volume-action attach "$MYSQL_VOLUME_ID" "$DROPLET_ID"
          else
            echo "MySQL volume not found"
          fi

          if [ -n "$FILES_VOLUME_ID" ]; then
            echo "Attaching Files volume..."
            doctl compute volume-action attach "$FILES_VOLUME_ID" "$DROPLET_ID"
          else
            echo "Files volume not found"
          fi

      - name: Get VPS IP
        run: |
          echo "Waiting for droplet to be ready..."
          while : ; do
            echo "."
            sleep 2
            STATUS=$(doctl compute droplet get mautic-vps --format Status --no-header)
            if [ "$STATUS" = "active" ]; then
              IP=$(doctl compute droplet get mautic-vps --format PublicIPv4 --no-header)
              if [ -n "$IP" ]; then
                echo "Droplet is active. IP address: $IP"
                break
              fi
            fi
          done
          echo "ip=$IP" >> $GITHUB_ENV

      - name: Update Cloudflare DNS Record
        if: env.droplet_created == 'true'
        run: |
          # Check if Cloudflare API token is available
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "Warning: CLOUDFLARE_API_TOKEN not set. Skipping DNS update."
            exit 0
          fi

          # Get the zone ID for the domain
          ZONE_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=${{ vars.DOMAIN }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | jq -r '.result[0].id')

          if [ -z "$ZONE_ID" ] || [ "$ZONE_ID" = "null" ]; then
            echo "Error: Could not find Cloudflare zone ID for domain ${{ vars.DOMAIN }}"
            exit 1
          fi

          # Function to update or create DNS record
          update_dns_record() {
            local record_name=$1
            echo "Processing DNS record for $record_name"
            
            # Get the existing DNS record ID
            local RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?name=$record_name" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" | jq -r '.result[0].id')
            
            if [ -z "$RECORD_ID" ] || [ "$RECORD_ID" = "null" ]; then
              # Create new A record if it doesn't exist
              echo "Creating new A record for $record_name"
              curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
                -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                --data "{
                  \"type\": \"A\",
                  \"name\": \"$record_name\",
                  \"content\": \"${{ env.ip }}\",
                  \"ttl\": 1,
                  \"proxied\": true
                }"
            else
              # Update existing A record
              echo "Updating A record for $record_name"
              curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$RECORD_ID" \
                -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                --data "{
                  \"type\": \"A\",
                  \"name\": \"$record_name\",
                  \"content\": \"${{ env.ip }}\",
                  \"ttl\": 1,
                  \"proxied\": true
                }"
            fi
          }

          # Update both main domain and subdomain
          update_dns_record "${{ vars.DOMAIN }}"
          update_dns_record "m.${{ vars.DOMAIN }}"
          echo "DNS records updated successfully"

      - name: Wait for server to be accessible
        run: |
          echo "Waiting for server at ${{ env.ip }} to be accessible..."
          while : ; do
            if nc -z ${{ env.ip }} 22; then
              echo "Server is up and accessible."
              break
            else
              echo "."
              sleep 2
            fi
          done

      - name: Prepare virtual server configuration
        if: ${{ vars.DOMAIN }}
        run: |
          # Rename the nginx-virtual-host-template file
          mv nginx-virtual-host-template "nginx-virtual-host-${{ vars.DOMAIN }}"

          # Replace placeholders in the nginx configuration
          sed -i "s/DOMAIN_NAME/${{ vars.DOMAIN }}/g" "nginx-virtual-host-${{ vars.DOMAIN }}"
          sed -i "s/PORT/${{ env.MAUTIC_PORT }}/g" "nginx-virtual-host-${{ vars.DOMAIN }}"

          # Add Cloudflare SSL configuration
          echo "
          # Cloudflare SSL configuration
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_prefer_server_ciphers on;
          ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
          ssl_session_cache shared:SSL:10m;
          ssl_session_timeout 1d;
          ssl_session_tickets off;

          # Cloudflare headers
          set_real_ip_from 103.21.244.0/22;
          set_real_ip_from 103.22.200.0/22;
          set_real_ip_from 103.31.4.0/22;
          set_real_ip_from 104.16.0.0/13;
          set_real_ip_from 104.24.0.0/14;
          set_real_ip_from 108.162.192.0/18;
          set_real_ip_from 131.0.72.0/22;
          set_real_ip_from 141.101.64.0/18;
          set_real_ip_from 162.158.0.0/15;
          set_real_ip_from 172.64.0.0/13;
          set_real_ip_from 173.245.48.0/20;
          set_real_ip_from 188.114.96.0/20;
          set_real_ip_from 190.93.240.0/20;
          set_real_ip_from 197.234.240.0/22;
          set_real_ip_from 198.41.128.0/17;
          set_real_ip_from 2400:cb00::/32;
          set_real_ip_from 2606:4700::/32;
          set_real_ip_from 2803:f800::/32;
          set_real_ip_from 2405:b500::/32;
          set_real_ip_from 2405:8100::/32;
          set_real_ip_from 2a06:98c0::/29;
          set_real_ip_from 2c0f:f248::/32;

          real_ip_header CF-Connecting-IP;
          " >> "nginx-virtual-host-${{ vars.DOMAIN }}"

          cat nginx-virtual-host-${{ vars.DOMAIN }} # debug

      - name: Prepare setup-dc.sh script
        run: |
          # Replace placeholders in setup-dc.sh
          sed -i "s/{{IP_ADDRESS}}/${{ env.ip }}/g" setup-dc.sh
          sed -i "s/{{PORT}}/${{ env.MAUTIC_PORT }}/g" setup-dc.sh
          sed -i "s/{{EMAIL_ADDRESS}}/${{ env.EMAIL_ADDRESS }}/g" setup-dc.sh
          sed -i "s/{{MAUTIC_PASSWORD}}/${{ secrets.MAUTIC_PASSWORD }}/g" setup-dc.sh
          if [ ! -z "${{ env.DOMAIN }}" ]; then
            sed -i "s/{{DOMAIN_NAME}}/${{ env.DOMAIN }}/g" setup-dc.sh
          fi
          cat setup-dc.sh # debug
        env:
          EMAIL_ADDRESS: ${{ vars.EMAIL_ADDRESS }}
          DOMAIN: ${{ vars.DOMAIN }}

      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-rlgoDzvc"
          SOURCE: "."
          REMOTE_HOST: ${{ env.ip }}
          REMOTE_USER: root
          TARGET: /var/www
          EXCLUDE: ".git"
          SCRIPT_BEFORE: mkdir -p /var/www
          SCRIPT_AFTER: /var/www/setup-dc.sh > /var/log/setup-dc.log 2>&1

      - name: Open your Mautic instance
        run: |
          if [ -z "${DOMAIN}" ]; then
            echo "You can visit the Mautic installation at http://${{ env.ip }}:${{ env.MAUTIC_PORT }}"
          else
            echo "You can visit the Mautic installation at http://m.${DOMAIN}"
          fi
        env:
          DOMAIN: ${{ vars.DOMAIN }}

      - name: Download setup-dc.log from Server
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@${{ env.ip }}:/var/log/setup-dc.log ./setup-dc.log
          rm -f ~/.ssh/id_rsa
        shell: bash

      - name: Upload setup-dc.log as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: setup-dc-log
          path: ./setup-dc.log
